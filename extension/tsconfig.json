// Running tsc locally will compile the closest project defined by a tsconfig.json
{
    // Typescript official docs on these are very good  https://www.typescriptlang.org/tsconfig
    "compilerOptions": {
      /*  Only used when emitting files
      "rootDir": "extension",                 // will chop off "rootDir" from the input and prepend "outDir to it"
      "outDir": "./extensionbuil",            // not needed because we dont use base ts for compilation
      "sourceMap": true,                      // allows debuggers and other tools to display original ts code when working with the emitted js files.
      "removeComments": true,                 // strips comments from TS files when converting into JS
      "declaration": true,                    // generation of .d.ts files. .d.ts files are type definition files which describe the external API of your module. 
                                              // With .d.ts files, tools like TypeScript can provide intellisense and accurate types for un-typed code.
                                              //  Its useful when others are your using your js file/module (it would have a .d.ts next to it to help type checking)
                                              // e.g. jquery, underscore were already written in js and instead of rewriting in ts, they just made a .d.ts file
                                              // Now when we use it from our typescript code, we get types and intellisense
                                              // the declaration file only proides type decalarations of functions variables defined in the re
                                              spective js file.
      "emitDeclarationOnly": true,            // as it says. useful when you are using a transpiler other than ts and you only want .d.ts  */
      // "include": ["./extension/**/*.ts"]   // includes all .ts files in extension as /**/* matches any directory nested to any level. 
                                              // includes all files in dir by default for type checking purpsoes

      /* More general stuff */
      "noEmit": true,                         // doesnt emit compiler output files like js, source-maps. can use babel instead for building. npx tsc will just become a type checker
      "strict": true,                         // The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.
      "noImplicitAny": true,
      "allowJs": true,
      "esModuleInterop": true, 
      "moduleResolution": "Node",
      "isolatedModules": true,                // Makes sure everything is a module, or else itll be a global script instead. More in onenote...
      "downlevelIteration": true,              // was needed for combining maps 
      "target": "es6",                        // sets js language version for emitted js and include compatiable library declarations. 
                                              // Typescript will also complain about you using es6 syntax such as NodeListOf cant be iterated if u dont have this
      // "allowImportingTsExtensions": true,
    }
  }